#!/usr/bin/python3

import numpy as np


def det_2x2(A):
    detA = A[0, 0] * A[1, 1] - A[0, 1] * A[1, 0]

    return detA


def det_3x3(A):
    detA = A[0, 0] * (A[1, 1] * A[2, 2] - A[1, 2] * A[2, 1]) - \
           A[0, 1] * (A[1, 0] * A[2, 2] - A[1, 2] * A[2, 0]) + \
           A[0, 2] * (A[1, 0] * A[2, 1] - A[1, 1] * A[2, 0])

    return detA


# def cramer_2x2(A, b):
#     detA = det_2x2(A)
#     x = np.array([(b[1] * A[0, 0] - b[0] * A[1, 0]) /
#                   detA, (b[0] * A[1, 1] - b[1] * A[0, 1]) / detA])
#     return x

def cramer_2x2(A, b):
    detA = det_2x2(A)
    x2 = (b[1] * A[0, 0] - b[0] * A[1, 0]) / detA
    x1 = (b[0] * A[1, 1] - b[1] * A[0, 1]) / detA
    x = np.array([x1, x2])
    return x


def cramer_3x3(A, b):
    detA = det_3x3(A)

    x1 = det_3x3(np.array([[b[0], A[0, 1], A[0, 2]],
                           [b[1], A[1, 1], A[1, 2]],
                           [b[2], A[2, 1], A[2, 2]]]))

    x2 = det_3x3(np.array([[A[0, 0], b[0], A[0, 2]],
                           [A[1, 0], b[1], A[1, 2]],
                           [A[2, 0], b[2], A[2, 2]]]))

    x3 = det_3x3(np.array([[A[0, 0], A[0, 1], b[0]],
                           [A[1, 0], A[1, 1], b[1]],
                           [A[2, 0], A[2, 1], b[2]]]))

    x = np.array([x1 / detA, x2 / detA, x3 / detA])
    return x

# def solve_nxn(A, b):
#     n = A.shape[0]  # Get the size of the matrix A (number of rows or columns)
#
#     # Check if the matrix is square
#     if A.shape[0] != A.shape[1]:
#         raise ValueError("Matrix A must be square")
#
#     # Check if the dimensions of A and b are compatible
#     if A.shape[0] != b.shape[0]:
#         raise ValueError("Dimensions of A and b are not compatible")
#
#     # Gaussian Elimination
#     augmented_matrix = np.column_stack((A, b))
#     for i in range(n):
#         # Divide the current row by the pivot element
#         pivot = augmented_matrix[i, i]
#         augmented_matrix[i, :] /= pivot
#
#         # Eliminate the current column below the pivot
#         for j in range(i + 1, n):
#             factor = augmented_matrix[j, i]
#             augmented_matrix[j, :] -= factor * augmented_matrix[i, :]
#
#     # Back Substitution
#     x = np.zeros((n, 1))
#     for i in range(n - 1, -1, -1):
#         x[i] = augmented_matrix[i, -1]
#         for j in range(i + 1, n):
#             x[i] -= augmented_matrix[i, j] * x[j]
#
#     return x
#
#
#
# def solve_nxn(A, b):
#     n = A.shape[0]  # Get the size of the matrix A (number of rows or columns)
#
#     # Check if the matrix is square
#     if A.shape[0] != A.shape[1]:
#         raise ValueError("Matrix A must be square")
#
#     # Check if the dimensions of A and b are compatible
#     if A.shape[0] != b.shape[0]:
#         raise ValueError("Dimensions of A and b are not compatible")
#
#     # Check if the matrix is singular (determinant is zero)
#     detA = np.linalg.det(A)
#     if detA == 0:
#         return np.full((n, 1), np.nan)
#
#     # Solve the system using matrix operations
#     x = np.empty((n, 1))
#     for i in range(n):
#         A_temp = A.copy()
#         A_temp[:, i] = b
#         detAi = np.linalg.det(A_temp)
#         x[i] = detAi / detA
#
#     return x

def solve_nxn(A, b):
    n = A.shape[0]  # Get the size of the matrix A (number of rows or columns)

    # Check if the matrix is square
    if A.shape[0] != A.shape[1]:
        raise ValueError("Matrix A must be square")

    # Check if the dimensions of A and b are compatible
    if A.shape[0] != b.shape[0]:
        raise ValueError("Dimensions of A and b are not compatible")

    # Forward Elimination
    for i in range(n - 1):
        for j in range(i + 1, n):
            factor = A[j, i] / A[i, i]
            A[j, :] -= factor * A[i, :]
            b[j] -= factor * b[i]

    # Back Substitution
    x = np.zeros((n, 1))
    x[n - 1] = b[n - 1] / A[n - 1, n - 1]

    for i in range(n - 2, -1, -1):
        x[i] = (b[i] - np.dot(A[i, i + 1:], x[i + 1:])) / A[i, i]

    return x

# # Extra Credit Bonus
# def cramer_nxn(A, b):
#     # TO DO
#     return x


def main():
    # set up a 2 x2 array
    A = np.array([[1., 2.], [3., 4.]])

    # Set up a 2x1 array for b
    b = np.array([5., 6.])

    print(det_2x2(A))
    print(np.linalg.det(A))

    print(cramer_2x2(A, b))
    print(np.linalg.solve(A, b))

    # Set up a 3x3 array
    A = np.array([[10., 2., 3.],
                  [4., 5., 6.],
                  [7., 8., 9.]])

    # Set up a 3x1 array for b
    b = np.array([10., 11., 12.])

    print(det_3x3(A))
    print(np.linalg.det(A))

    print(cramer_3x3(A, b))
    print(np.linalg.solve(A, b))

    # Set up a square matrix A
    A = np.array([[2., -1., 0.],
                  [-1., 2., -1.],
                  [0., -1., 2.]])

    # Set up the vector b
    b = np.array([1., 0., 1.])

    # Solve the system using the solve_nxn function
    x = solve_nxn(A, b)

    # Print the solution vector
    print(x)
    print(np.linalg.solve(A, b))

    # Generate a random 10x10 matrix A
    A = np.random.rand(10, 10)

    # Generate a random 10x1 vector b
    b = np.random.rand(10, 1)

    # Solve the system using the solve_nxn function
    x = solve_nxn(A, b)

    print(x)
    print(np.linalg.solve(A, b))

if __name__ == "__main__":
    main()


